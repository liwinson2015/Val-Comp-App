/* Square-slot bracket with single-node QF/SF and exact centering; no transform scaling */

/* ---------- Canvas sizing (no transform scaling) ---------- */
.viewport{
  --outerPad: 160px;
  --gap: 18px;

  /* Fit 7 columns + 6 gaps within viewport minus outerPad */
  --colw: clamp(120px, calc((100vw - var(--outerPad) - (6 * var(--gap))) / 7), 155px);

  /* slot & pair geometry */
  --slotH: 38px;
  --pairGapInside: 10px;
  --pairPad: 4px;
  --border: 2px;

  /* derived */
  --pairH: calc(var(--slotH) * 2 + var(--pairGapInside) + var(--pairPad) * 2 + var(--border) * 2);

  /* rhythms: center nodes between feeders */
  --r16Space: 20px;
  --qfSpace: calc(var(--pairH) + var(--r16Space));
  --sfSpace: calc(var(--pairH) + var(--qfSpace));

  /* connectors */
  --line: #2a2f36;
  --joinW: 2px;
  --stub: 10px;
  --arm:  calc(var(--gap) - var(--stub));

  /* neutral palette for now */
  --slotBg: #f4f6fb;
  --slotBorder: #cfd7ea;
  --nodeBg: #ffffff;
  --nodeBorder: #cfd7ea;
  --textDark: #0f1320;

  --stageW: calc(var(--colw) * 7 + var(--gap) * 6);
  --stageH: clamp(560px, 68vh, 720px);
  --topSpace: 130px;

  width:100%;
  height:calc(100vh - var(--topSpace));
  display:grid;
  place-items:center;
  overflow:visible;
}

.stage{
  width:var(--stageW);
  height:var(--stageH);
}

.grid{
  width:100%;
  height:100%;
  display:grid;
  grid-template-columns:repeat(7,var(--colw));
  gap:var(--gap);
  align-items:start;
}

/* ---------- Rounds ---------- */
.round { position:relative; }

.roundTitle{
  color:#dfe6f3;
  font-weight:900;
  font-size:12px;
  letter-spacing:.08em;
  text-transform:uppercase;
  margin-bottom:8px;
}

.stack{ position:relative; display:grid; }

/* vertical spacing */
.r16 .pair{ margin: calc(var(--r16Space)/2) 0; }
.qf  .node{ margin: calc(var(--qfSpace)/2) 0; }
.sf  .node{ margin: calc(var(--sfSpace)/2) 0; }

/* ---------- R16 pairs (two separate slots) ---------- */
.pair{
  position:relative;
  padding: var(--pairPad) 0;
  /* true midpoint used by connectors */
  --midY: calc(var(--pairPad) + var(--slotH) + (var(--pairGapInside) / 2) + var(--border));
}

/* two square slots */
.slot{
  height: var(--slotH);
  border: var(--border) solid var(--slotBorder);
  border-radius: 0;
  background: var(--slotBg);
  display:flex;
  align-items:center;
  padding: 0 10px;
}
.slot + .slot{ margin-top: var(--pairGapInside); }

.label{
  color: var(--textDark);
  font-weight: 700;
  font-size: 13px;
  white-space:nowrap;
  overflow:hidden;
  text-overflow:ellipsis;
}

/* short stub leaving each R16 pair toward the QF column at exact midY */
.pair::after{
  content:"";
  position:absolute;
  top: var(--midY);
  right: calc(var(--stub) * -1);
  width: var(--stub);
  height: var(--joinW);
  background: var(--line);
}
.sideRight.pair::after{
  left: calc(var(--stub) * -1);
  right: auto;
}

/* ---------- Single Node boxes for QF / SF ---------- */
.node{
  position:relative;
  height: var(--slotH);
  border: var(--border) solid var(--nodeBorder);
  border-radius: 0;
  background: var(--nodeBg);
  display:flex;
  align-items:center;
  justify-content:center;
  padding: 0 12px;
  color: var(--textDark);
}
.nodeText{ font-weight:700; font-size:13px; }

/* Each QF node draws the vertical collector (spanning its two feeders) and the horizontal arm into itself */
.qf .node{
  /* collector height spans top & bottom R16 slots (with borders) */
  --collectH: calc(var(--slotH) + var(--pairGapInside) + var(--border)*2);

  background-image:
    linear-gradient(var(--line), var(--line)),  /* vertical collector */
    linear-gradient(var(--line), var(--line));  /* horizontal arm into node */
  background-repeat: no-repeat, no-repeat;
  background-size:
    var(--joinW) var(--collectH),
    var(--arm) var(--joinW);
  background-position:
    left calc(var(--gap) * -1 + var(--arm)) center,
    left calc(var(--gap) * -1)              center;
}

/* Semifinal nodes collect from two QF nodes */
.sf .node{
  --collectH: calc(var(--qfSpace) - var(--r16Space));
  background-image:
    linear-gradient(var(--line), var(--line)),
    linear-gradient(var(--line), var(--line));
  background-repeat: no-repeat, no-repeat;
  background-size:
    var(--joinW) var(--collectH),
    var(--arm) var(--joinW);
  background-position:
    left calc(var(--gap) * -1 + var(--arm)) center,
    left calc(var(--gap) * -1)              center;
}

/* mirror for right side */
.right .qf .node,
.right .sf .node{
  background-position:
    right calc(var(--gap) * -1 + var(--arm)) center,
    right calc(var(--gap) * -1)              center;
}

/* ---------- Final block (neutral; square) ---------- */
.finalCol{ position:relative; }

.winner{
  text-align:center;
  color:#e7ecf5;
  opacity:.9;
  font-weight:900;
  letter-spacing:.10em;
  text-transform:uppercase;
  font-size:12px;
  margin-bottom:8px;
}

.champWrap{ display:grid; place-items:center; margin-bottom:6px; }

.champBox{
  min-width: var(--colw);
  background:#1c2952;
  border: var(--border) solid #122040;
  color:#ffffff;
  border-radius: 0;
  padding:10px 16px;
}

.champText{ font-weight:800; }

.stem{
  width:var(--joinW);
  height:18px;
  background:var(--line);
  border-radius:0;
  margin:8px auto;
}

.finalRow{
  display:grid;
  grid-template-columns:1fr 14px 1fr;
  align-items:center;
  gap:10px;
}

.finalSlot{
  background:#ffffff;
  border: var(--border) solid var(--nodeBorder);
  color:#0f1320;
  border-radius:0;
  padding:10px 14px;
  height: var(--slotH);
  display:flex;
  align-items:center;
  justify-content:center;
}

.finalText{ font-weight:700; font-size:13px; }

.midbar{
  height:var(--joinW);
  width:100%;
  background:var(--line);
  border-radius:0;
}
